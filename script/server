#!/usr/bin/env ruby

# recursive fun
def process_yaml(obj)
  if obj.class == Array
    obj.each{|x|
      process_yaml(x)
    }
  elsif obj.class == Hash
    obj.each{|k, v|
      process_yaml(k)
      process_yaml(v)
    }
  elsif [String, Fixnum].include?(obj.class)
    @add_to_argv << obj.to_s
  else
    raise "Don't know how to handle: #{obj.class}"
  end
end

config = File.dirname(__FILE__) + "/../config/server.yml"
pidfile = File.dirname(__FILE__) + "/../tmp/pids/thin.pid"

action = "restart"
actions = ["restart", "stop", "start"]
if actions.include?(ARGV[0])
  action = ARGV.shift
end

if action == "restart"
  system("#{__FILE__} stop")
  system("#{__FILE__} start")
  exit
end

if File.exists?(config)
  require "yaml"
  res = YAML::load(File.read(config))
  @add_to_argv = []
  process_yaml(res)
  if actions.include?(@add_to_argv[0])
    action = @add_to_argv.shift
  end
  ARGV.unshift(*@add_to_argv)
end

if (system("which thin1.8 >/dev/null") || system("which thin >/dev/null")) && ENV['NO_THIN'] == nil
  require 'thin'
  thin_argv = ["-e", ENV["RAILS_ENV"] || "development", "-P", pidfile, "-c", File.dirname(__FILE__) + '/../', "-A", "rails", "--no-epoll", ARGV, action].flatten
  if action == "start"
    # OLDTODO: check that it's not already running before doing this
    open(pidfile,"w") { |f| f.write(Process.pid.to_s) }
  elsif action == "stop"
    thin_argv.push("-t", "10")
  end
  Thin::Runner.new(thin_argv).run!
else
  require File.dirname(__FILE__) + '/../config/boot'
  require 'commands/server'
end
