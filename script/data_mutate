#!/usr/bin/env ruby
require File.dirname(__FILE__) + '/../config/boot'
require File.expand_path(File.dirname(__FILE__) + "/../config/environment")

digits = "0123456789".split("")
chars = "abcdefghijklmnopqrstuvwxyz".split("")

D = Default
D.destroy_all "name LIKE '%_cashier_%'"
D["coveredness_enabled"] = 0

def non_empty(val)
  return val && !val.empty?
end

def add(list, val)
  list << val if non_empty(val)
end

def fix_tx(txs, chars, digits, thing = "comments")
  txs.each do |tx|
    evalstr1 = "tx.#{thing}"
    evalstr = "tx.#{thing}=a"
    a = eval(evalstr1).gsub(/[a-zA-Z]/) { chars[rand(chars.size)] }
    eval(evalstr)
    a = eval(evalstr1).gsub(/[0-9]/) { digits[rand(digits.size)] }
    eval(evalstr)
    tx.save!
  end
end

def dump(contact)
  puts "#{contact.id}"
  puts " #{contact.first_name} #{contact.middle_name} #{contact.surname}"
  puts " #{contact.organization}" if contact.organization
  puts " " + contact.contact_methods.map(&:value).join(",")
  puts contact.extra_address
  puts contact.address
  puts contact.city + " " + contact.state_or_province + " " + contact.postal_code
end

first_names = []
middle_names = []
last_names = []
organizations = []
extra_addresses = []
addresses = []
cities = []
states = []
zips = []
countries = []

contact_methods = {}
ContactMethodType.find(:all).each {|x| contact_methods[x.id] = []}

puts "fixing up donations"
fix_tx(Donation.find(:all, :conditions=>"comments is not null and comments <> ''"), chars, digits)

puts "fixing up sales"
fix_tx(Sale.find(:all, :conditions=>"comments is not null and comments <> ''"), chars, digits)

puts "fixing up disbursements"
fix_tx(Disbursement.find(:all, :conditions=>"comments is not null and comments <> ''"), chars, digits)

puts "fixing up recyclings"
fix_tx(Recycling.find(:all, :conditions=>"comments is not null and comments <> ''"), chars, digits)

puts "fixing up notes"
fix_tx(Note.find(:all, :conditions=>"body is not null and body <> ''"), chars, digits, "body")

all = Contact.find(:all)

i = 0
size = all.size()
all.each do |contact|
  if (i%1000==0)
    puts "loading #{i}/#{size}"
  end
  add(first_names, contact.first_name)
  add(middle_names, contact.middle_name)
  add(last_names, contact.surname)
  add(organizations, contact.organization)
  add(extra_addresses, contact.extra_address)
  add(addresses, contact.address)
  add(cities, contact.city)
  add(states, contact.state_or_province)
  add(zips, contact.postal_code)
  add(countries, contact.country)
  contact.contact_methods.each do |method|
    add(contact_methods[method.contact_method_type_id], method.value)
  end
  i += 1
end

first_names = first_names.sort_by {rand<=>rand}
middle_names = middle_names.sort_by {rand<=>rand}
last_names = last_names.sort_by {rand<=>rand}
organizations = organizations.sort_by {rand<=>rand}
extra_addresses = extra_addresses.sort_by {rand<=>rand}
addresses = addresses.sort_by {rand<=>rand}
cities = cities.sort_by {rand<=>rand}
states = states.sort_by {rand<=>rand}
zips = zips.sort_by {rand<=>rand}
countries = countries.sort_by {rand<=>rand}

contact_methods.each {|x,y| contact_methods[x] = contact_methods[x].sort_by{rand<=>rand}}

i = 0
Contact.find(:all, :order => "id").each do |contact|

  if (i % 1000 == 0)
    puts "Contact: #{contact.id}"
    dump(contact)
  end

  contact.first_name = first_names.pop() if non_empty(contact.first_name)
  contact.middle_name = middle_names.pop() if non_empty(contact.middle_name)
  contact.surname = last_names.pop() if non_empty(contact.surname)
  contact.organization = organizations.pop() if non_empty(contact.organization)
  contact.extra_address = extra_addresses.pop() if non_empty(contact.extra_address)
  contact.address = addresses.pop() if non_empty(contact.address)
  contact.city = cities.pop() if non_empty(contact.city)
  contact.state_or_province = states.pop() if non_empty(contact.state_or_province)
  contact.postal_code = zips.pop() if non_empty(contact.postal_code)
  contact.country = countries.pop() if non_empty(contact.country)
  contact.contact_methods.each do |method|
    if non_empty(method.value)
      x = contact_methods[method.contact_method_type_id].pop()
      x = x.gsub(/\d/) {digits[rand(digits.size)]}
      x = x.gsub(/@(.*)\.([^.]+)/) {"@"+("x"*$1.size)+"."+$2}
      method.value = x
      method.save!
    end
  end

  if non_empty(contact.notes)
    contact.notes = contact.notes.gsub(/[a-zA-Z]/) {chars[rand(chars.size)]}
    contact.notes = contact.notes.gsub(/[0-9]/) {digits[rand(digits.size)]}
  end

  if (i % 1000 == 0)
    dump(contact)
    puts
  end

  i += 1
  contact.save()
end

# set all the passwords to secret
User.connection.execute("UPDATE users
                         SET crypted_password='29e0b109247cb32ea5bd27468c249ae7c63edf64',
                         salt='95ce12cab15a870505167d19b1bf95548a2f175c'")
names = User.find(:all).map(&:login).sort{rand<=>rand}
User.find(:all).each do |u|
  u.login += "1"
  u.save!
end

User.find(:all).each do |u|
  u.login = names.pop()
  u.email = u.email.gsub(/\d/) {digits[rand(digits.size)]}
  u.email = u.email.gsub(/@(.*)\.([^.]+)/) {"@"+("x"*$1.size)+"."+$2}
  u.save!
end

names = Worker.find(:all).map(&:name).sort{rand<=>rand}
contacts = Worker.find(:all).map(&:contact_id).sort{rand<=>rand}
Worker.find(:all).each do |w|
  next if w.id == 0
  w.name = names.pop
  w.contact_id = contacts.pop
  w.save!
end

User.reset_all_cashier_codes
admin = User.find_by_login("admin")
admin.cashier_code = 1234
admin.save!

ContactDuplicate.destroy_all
{:donations => :contract_id, :systems => :contract_id, :gizmo_events => :recycling_contract_id, :contacts => :contract_id}.each{|table,column|
  Inflector.classify(table.to_s).constantize.connection.execute("UPDATE #{table} SET #{column} = 1 WHERE #{column} IS NOT NULL")
}
Contract.destroy_all "name != 'default'"
