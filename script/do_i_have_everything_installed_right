#!/bin/sh

STATUS=0
p=$0
DEBUG=false
LIST=false
AUTO_INSTALL=false
AUTO_INSTALL_PACKAGES=
RAILS_VERSION=2.3.14

helpme(){
echo "Usage: $(basename $0) [options]"
echo ""
echo "Options:"
echo "  --help, -h          -- displays this help message"
echo "  --debug, -d         -- shows the output of the test commands"
echo "  --list, -l          -- shows the list of packages that would be tested or installed"
echo "  --auto-install, -i  -- automatically installs missing dependencies (not yet implemented)"
echo ""
}

while [ -n "$1" ]; do
    case "$1" in
        --debug|-d)
            DEBUG=true
            ;;
        --list|-l)
            LIST=true
            ;;
        --auto-install|-i)
            AUTO_INSTALL=true
            ;;
        --help|-h)
            helpme
            exit 0
            ;;
        *)
            echo "Unknown option: $1"
            echo
            helpme
            exit 1
            ;;
    esac
    shift
done

fail(){
    if [ "$AUTO_INSTALL" = "true" ]; then
	echo "FAILED"
	echo "  will auto-install $@"
	AUTO_INSTALL_PACKAGES="$AUTO_INSTALL_PACKAGES $@"
    else
	STATUS=1
	echo "FAILED"
	echo "  install $@"
    fi
}

install_pkg() {
    sudo apt-get install -y "$@"
}

error(){
    fail "$@"
    if [ "$AUTO_INSTALL" = "true" ] ; then
	echo "  installing early to allow further testing:"
	install_pkg "$@"
    else
	echo
	echo "After doing that, retry this script."
	exit $STATUS # 1
    fi
}

start(){
    echo -n "$@"
}

good(){
    echo "GOOD"
}

# Usage: run "checking for blah..." "which thing_to_look_for" "message_to_fix" "fail|error|return"

require_test(){
    echo "require '$1'" | ruby
}

require_perl_test(){
    perl -M$1 -e ''
}

runit(){
    if [ "$DEBUG" = "true" ]; then
        $1
    else
        $1 2>/dev/null 1>/dev/null
    fi
}

run(){
    if [ "$LIST" = "true" ]; then
	echo "$3"
	return
    fi
    if [ "$4" != "return" ]; then
        echo -n $1
    fi
    runit "$2"
    if [ $? != 0 ]; then
        if [ "$4" = "error" ]; then
            error "$3"
        elif [ "$4" = "fail" ]; then
            fail "$3"
        elif [ "$4" = "return" ]; then
            return 1
        else
            echo "Error in test script. Please report a bug."
        fi
    else
        if [ "$4" = "return" ]; then
            return 0
        else
            good
        fi
    fi
}

setup_stuff(){
    if [ "$LIST" = "true" ] ; then
	return
    fi
    run "..." "require_test rubygems" "..." "return"
    if [ $? = 0 ]; then
        GEMS="true"
    else
        GEMS="false"
    fi
}

check_a_version(){
    ruby -r "$(dirname $p)/../config/boot.rb" -e "test_version($(echo $@ | sed 's/[.]/,/g'))"
}

auto_install() {
    if [ "$AUTO_INSTALL" = "true" ] ; then
	if [ -n "$AUTO_INSTALL_PACKAGES" ]; then
	    echo "Now auto-installing packages: $@"
	    install_pkg "$AUTO_INSTALL_PACKAGES"
	else
	    echo "Nothing needs to be installed."
	fi
    fi
}

check_for_postgres(){
    [ -n "$(pgrep -x postgres)$(pgrep -x postmaster)" ]
}

test_my_rails_version(){
    check_a_version $RAILS_VERSION
}

test_find_thin(){
    which thin || which thin1.8
}

if [ "$LIST" = "false" ] ; then
    echo "Testing to see if you have everything required for fgdb to run..."
    echo
fi
run "Checking to see if ruby is installed..." "which ruby" "ruby" "error"
setup_stuff # only runable if ruby is installed
run "Checking to see if make is installed..." "which make" "make" "fail"
run "Checking to see if rails is installed..." "ruby $(dirname $0)/../config/boot.rb" "rails" "error"
run "Checking to see if rails is correct version ($RAILS_VERSION)..." "test_my_rails_version" "rails" "fail"
run "Checking to see if the ruby postgres bindings are installed..." "require_test pg" "ruby-pg" "fail"
run "Checking to see if nokogiri is installed..." "require_test nokogiri" "ruby-nokogiri" "fail"
run "Checking to see if barby is installed..." "require_test barby" "ruby-barby" "fail"
run "Checking to see if bluecloth is installed..." "require_test bluecloth" "ruby-bluecloth" "fail"
run "Checking to see if rmagick is installed..." "require_test RMagick" "ruby-rmagick" "fail"
run "Checking to see if bytes is installed..." "require_test bytes" "ruby-bytes" "fail"
run "Checking to see if prawn is installed..." "require_test prawn" "ruby-prawn" "fail"
run "Checking to see if RT::Client::REST is installed..." "require_perl_test RT::Client::REST" "librt-client-rest-perl" "fail"
run "Checking to see if xmlstarlet is installed..." "which xmlstarlet" "xmlstarlet" "fail"
run "Checking to see if thin is installed..." "test_find_thin" "thin" "fail"
run "Checking to see if curl is installed..." "which curl" "curl" "fail"
run "Checking to see if socat is installed..." "which socat" "socat" "fail"
run "Checking to see if ruby gnuplot is installed..." "require_test gnuplot" "ruby-nokogiri" "fail"
run "Checking to see if postgres is installed and running..." "check_for_postgres" "postgresql" "fail"
run "Checking to see if timeout is installed..." "which timeout" "coreutils" "fail"

auto_install

exit $STATUS

