#!/bin/sh

STATUS=0
p=$0
DEBUG=false
AUTO_INSTALL=false

helpme(){
echo "Usage: $(basename $0) [options]"
echo ""
echo "Options:"
echo "  --help, -h          -- displays this help message"
echo "  --debug, -d         -- shows the output of the test commands"
echo "  --auto-install, -i  -- automatically installs missing dependencies (not yet implemented)"
echo ""
}

while [ -n "$1" ]; do
    case "$1" in
        --debug|-d)
            DEBUG=true
            ;;
        --auto-install|-i)
            AUTO_INSTALL=true
            ;;
        --help|-h)
            helpme
            exit 0
            ;;
        *)
            echo "Unknown option: $1"
            echo
            helpme
            exit 1
            ;;
    esac
    shift
done

fail(){
    STATUS=1
    echo "FAILED"
    echo "  $@"
}

error(){
    fail "$@"
    echo
    echo "After doing that, retry this script."
    exit $STATUS # 1
}

start(){
    echo -n "$@"
}

good(){
    echo "GOOD"
}

# Usage: run "checking for blah..." "which thing_to_look_for" "message_to_fix" "fail|error|return"

require_test(){
    echo "require '$1'" | ruby
}

perl_use_test(){
    perl "-M$1" -e "print"
}

runit(){
    if [ "$DEBUG" = "true" ]; then
        $1
    else
        $1 2>/dev/null 1>/dev/null
    fi
}

run(){
    if [ "$4" != "return" ]; then
        echo -n $1
    fi
    runit "$2"
    if [ $? != 0 ]; then
        if [ "$4" = "error" ]; then
            error "$3"
        elif [ "$4" = "fail" ]; then
            fail "$3"
        elif [ "$4" = "return" ]; then
            return 1
        else
            echo "Error in test script. Please report a bug."
        fi
    else
        if [ "$4" = "return" ]; then
            return 0
        else
            good
        fi
    fi
}

setup_stuff(){
    run "..." "require_test rubygems" "..." "return"
    if [ $? = 0 ]; then
        GEMS="true"
    else
        GEMS="false"
    fi
}

check_a_version(){
    ruby -r "$(dirname $p)/../config/boot.rb" -e "test_version($(echo $@ | sed 's/[.]/,/g'))"
}

check_for_postgres(){
    [ -n "$(pgrep -x postgres)$(pgrep -x postmaster)" ]
}

test_my_rails_version(){
    check_a_version 2.2.3 || check_a_version 2.1.2 || check_a_version 2.1.0
}

test_find_thin(){
    which thin || which thin1.8
}

echo "Testing to see if you have everything required for fgdb to run..."
echo
run "Checking to see if ruby is installed..." "which ruby" "install ruby" "error"
run "Checking to see if perl is installed..." "which perl" "install perl" "error"
setup_stuff # only runable if ruby is installed
run "Checking to see if make is installed..." "which make" "install make" "fail"
run "Checking to see if rails is installed..." "ruby $(dirname $0)/../config/boot.rb" "install rails" "error"
run "Checking to see if rails is correct version..." "test_my_rails_version" "use rails version 2.1.x" "fail"
run "Checking to see if the ruby postgres bindings are installed..." "require_test pg" "install libpgsql-ruby" "fail"
run "Checking to see if nokogiri is installed..." "require_test nokogiri" "install libnokogiri-ruby" "fail"
run "Checking to see if barby is installed..." "require_test barby" "install libbarby-ruby" "fail"
run "Checking to see if rmagick is installed..." "require_test RMagick" "install librmagick-ruby" "fail"
run "Checking to see if bytes is installed..." "require_test bytes" "install libbytes-ruby1.8" "fail"
run "Checking to see if json is installed..." "require_test json" "install libjson-ruby1.8" "fail"
run "Checking to see if xmlstarlet is installed..." "which xmlstarlet" "install xmlstarlet" "fail"
run "Checking to see if thin is installed..." "which thin" "install thin" "fail"
run "Checking to see if zoom is installed..." "require_test zoom" "install libzoom-ruby" "fail"
run "Checking to see if thin is installed..." "test_find_thin" "install thin" "fail"
run "Checking to see if curl is installed..." "which curl" "install curl" "fail"
run "Checking to see if socat is installed..." "which socat" "install socat" "fail"
run "Checking to see if ruby gnuplot is installed..." "require_test gnuplot" "install libgnuplot-ruby" "fail"
run "Checking to see if xapian is installed..." "require_test xapian" "install libxapian-ruby1.8" "fail"
run "Checking to see if posixlock is installed..." "require_test posixlock" "install libposixlock-ruby" "fail"
run "Checking to see if XML::XPath is installed..." "perl_use_test XML::XPath" "install libxml-xpath-perl" "fail"
run "Checking to see if PDF::API2 is installed..." "perl_use_test PDF::API2" "install libpdf-api2-perl" "fail"
run "Checking to see if Proc::Daemon is installed..." "perl_use_test Proc::Daemon" "install libproc-daemon-perl" "fail"
run "Checking to see if Paper::Specs is installed..." "perl_use_test Paper::Specs" "install libpaper-specs-perl" "fail"
run "Checking to see if postgres is installed and running..." "check_for_postgres" "install and start postgres" "fail"
run "Checking to see if timeout is installed..." "which timeout" "install timeout" "fail"

exit $STATUS

