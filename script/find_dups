#!/usr/bin/env ruby
require File.dirname(__FILE__) + '/../config/boot'
require File.expand_path(File.dirname(__FILE__) + "/../config/environment")

def add(list, val)
  list << val if val
end

i=0
names = {}
# only with name WHERE clause: Contact.find(:all, :conditions => ['LENGTH(COALESCE(first_name,'') || COALESCE(organization,'') || COALESCE(surname,'')) > 0']).each do |c|
# no op WHERE clause: Contact.find(:all, :conditions => ['true']).each do |c|
# addr validated (large postal code): Contact.find(:all, :conditions => ["LENGTH(postal_code) > 9"]).each do |c|
Contact.find(:all, :conditions => ["LENGTH(postal_code) > 9"]).each do |c|
  addr = "#{c.extra_address.to_s.strip} #{c.address.to_s.strip} #{c.postal_code.to_s.strip}".downcase().gsub(/\b(st|ave|av|rd|road)\b/, "")
  # repect whitespace: name = "#{c.first_name.to_s.strip} #{c.surname.to_s.strip} #{c.organization.to_s.strip.sub(/^the /i, "")} #{addr}".downcase().gsub(/[^a-z0-9\s]/, "")
  # ignore whitespace: name = "#{c.first_name.to_s.strip} #{c.surname.to_s.strip} #{c.organization.to_s.strip.sub(/^the /i, "")} #{addr}".downcase().gsub(/[^a-z0-9]/, "")
  # ignore whitespace and vowels: name = "#{c.first_name.to_s.strip} #{c.surname.to_s.strip} #{c.organization.to_s.strip.sub(/^the /i, "")} #{addr}".downcase().gsub(/[aeiou]|[^a-z0-9]/, "")
  name = "#{c.first_name.to_s.strip} #{c.surname.to_s.strip} #{c.organization.to_s.strip.sub(/^the /i, "")} #{addr}".downcase().gsub(/[aeiou]|[^a-z0-9]/, "")
  rv = names[name]
  if rv == nil
    names[name] = [c.id]
  else
    names[name] << c.id
  end
  i+=1
  puts "loaded #{i} -> #{c.id}" if i%1000==0
end

ContactDuplicate.connection.execute("DELETE FROM contact_duplicates")

names = names.select {|k,v|v.size()>1}
names.each do |k,v|
  puts "DUP! #{k}"
  v.each do |id|
    cd = ContactDuplicate.new({:contact_id => id, :dup_check => k})
    cd.save
    c = Contact.find(id)
    puts "#{c.id} #{c.first_name} #{c.surname} #{c.organization} --#{c.extra_address}-- --#{c.address}-- #{c.city} #{c.postal_code} #{c.contact_methods.map(&:value).join(",")}"
  end
  puts
end

puts "there are #{names.size} potential matches"
